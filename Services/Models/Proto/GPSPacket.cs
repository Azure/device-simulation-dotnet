// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GPSPacket.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from GPSPacket.proto</summary>
public static partial class GPSPacketReflection {

  #region Descriptor
  /// <summary>File descriptor for GPSPacket.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static GPSPacketReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg9HUFNQYWNrZXQucHJvdG8ihwEKCUdQU1BhY2tldBIQCghsYXRpdHVkZRgB",
          "IAEoARIRCglsb25naXR1ZGUYAiABKAESEAoIYWx0aXR1ZGUYAyABKAESEAoI",
          "YWNjdXJhY3kYBCABKA0SDwoHaGVhZGluZxgFIAEoARINCgVzcGVlZBgGIAEo",
          "DRIRCgl0aW1lc3RhbXAYByABKARCLwotY29tLm9sYXBsYXkucHJvdG9idWYu",
          "dGVsZW1hdGljcy52Mi5jbGllbnQuZ3BzYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::GPSPacket), global::GPSPacket.Parser, new[]{ "Latitude", "Longitude", "Altitude", "Accuracy", "Heading", "Speed", "Timestamp" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class GPSPacket : pb::IMessage<GPSPacket> {
  private static readonly pb::MessageParser<GPSPacket> _parser = new pb::MessageParser<GPSPacket>(() => new GPSPacket());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GPSPacket> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GPSPacketReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GPSPacket() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GPSPacket(GPSPacket other) : this() {
    latitude_ = other.latitude_;
    longitude_ = other.longitude_;
    altitude_ = other.altitude_;
    accuracy_ = other.accuracy_;
    heading_ = other.heading_;
    speed_ = other.speed_;
    timestamp_ = other.timestamp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GPSPacket Clone() {
    return new GPSPacket(this);
  }

  /// <summary>Field number for the "latitude" field.</summary>
  public const int LatitudeFieldNumber = 1;
  private double latitude_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Latitude {
    get { return latitude_; }
    set {
      latitude_ = value;
    }
  }

  /// <summary>Field number for the "longitude" field.</summary>
  public const int LongitudeFieldNumber = 2;
  private double longitude_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Longitude {
    get { return longitude_; }
    set {
      longitude_ = value;
    }
  }

  /// <summary>Field number for the "altitude" field.</summary>
  public const int AltitudeFieldNumber = 3;
  private double altitude_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Altitude {
    get { return altitude_; }
    set {
      altitude_ = value;
    }
  }

  /// <summary>Field number for the "accuracy" field.</summary>
  public const int AccuracyFieldNumber = 4;
  private uint accuracy_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Accuracy {
    get { return accuracy_; }
    set {
      accuracy_ = value;
    }
  }

  /// <summary>Field number for the "heading" field.</summary>
  public const int HeadingFieldNumber = 5;
  private double heading_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Heading {
    get { return heading_; }
    set {
      heading_ = value;
    }
  }

  /// <summary>Field number for the "speed" field.</summary>
  public const int SpeedFieldNumber = 6;
  private uint speed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Speed {
    get { return speed_; }
    set {
      speed_ = value;
    }
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 7;
  private ulong timestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Timestamp {
    get { return timestamp_; }
    set {
      timestamp_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GPSPacket);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GPSPacket other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Longitude, other.Longitude)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Altitude, other.Altitude)) return false;
    if (Accuracy != other.Accuracy) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Heading, other.Heading)) return false;
    if (Speed != other.Speed) return false;
    if (Timestamp != other.Timestamp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Latitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Latitude);
    if (Longitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Longitude);
    if (Altitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Altitude);
    if (Accuracy != 0) hash ^= Accuracy.GetHashCode();
    if (Heading != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Heading);
    if (Speed != 0) hash ^= Speed.GetHashCode();
    if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Latitude != 0D) {
      output.WriteRawTag(9);
      output.WriteDouble(Latitude);
    }
    if (Longitude != 0D) {
      output.WriteRawTag(17);
      output.WriteDouble(Longitude);
    }
    if (Altitude != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(Altitude);
    }
    if (Accuracy != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Accuracy);
    }
    if (Heading != 0D) {
      output.WriteRawTag(41);
      output.WriteDouble(Heading);
    }
    if (Speed != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(Speed);
    }
    if (Timestamp != 0UL) {
      output.WriteRawTag(56);
      output.WriteUInt64(Timestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Latitude != 0D) {
      size += 1 + 8;
    }
    if (Longitude != 0D) {
      size += 1 + 8;
    }
    if (Altitude != 0D) {
      size += 1 + 8;
    }
    if (Accuracy != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Accuracy);
    }
    if (Heading != 0D) {
      size += 1 + 8;
    }
    if (Speed != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Speed);
    }
    if (Timestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GPSPacket other) {
    if (other == null) {
      return;
    }
    if (other.Latitude != 0D) {
      Latitude = other.Latitude;
    }
    if (other.Longitude != 0D) {
      Longitude = other.Longitude;
    }
    if (other.Altitude != 0D) {
      Altitude = other.Altitude;
    }
    if (other.Accuracy != 0) {
      Accuracy = other.Accuracy;
    }
    if (other.Heading != 0D) {
      Heading = other.Heading;
    }
    if (other.Speed != 0) {
      Speed = other.Speed;
    }
    if (other.Timestamp != 0UL) {
      Timestamp = other.Timestamp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          Latitude = input.ReadDouble();
          break;
        }
        case 17: {
          Longitude = input.ReadDouble();
          break;
        }
        case 25: {
          Altitude = input.ReadDouble();
          break;
        }
        case 32: {
          Accuracy = input.ReadUInt32();
          break;
        }
        case 41: {
          Heading = input.ReadDouble();
          break;
        }
        case 48: {
          Speed = input.ReadUInt32();
          break;
        }
        case 56: {
          Timestamp = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
