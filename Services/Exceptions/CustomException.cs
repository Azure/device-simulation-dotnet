// Copyright (c) Microsoft. All rights reserved.

using System;

namespace Microsoft.Azure.IoTSolutions.DeviceSimulation.Services.Exceptions
{
    /// <summary>
    /// The purpose of this exception is to be a base exception for all other
    /// custom exception, so that try-catch can catch exceptions generated by
    /// our code and avoid wrapping them with another custom exception.
    ///
    /// For instance, instead of writing:
    ///
    ///     try { ...code... }
    ///   › catch (InvalidInputException) { throw; }
    ///   › catch (ResourceNotFoundException) { throw; }
    ///   › catch (ConflictingResourceException) { throw; }
    ///   › catch (ExternalDependencyException) { throw; }
    ///     catch (Exception) { ... do something ...  }
    ///
    /// we can write:
    ///
    ///     try { ...code... }
    ///   › catch (CustomException) { throw; }                 ‹
    ///     catch (Exception) { ... do something ...  }
    ///
    /// reducing the amount of redundant code.
    /// </summary>
    public abstract class CustomException : Exception
    {
        protected CustomException() : base()
        {
        }

        protected CustomException(string message) : base(message)
        {
        }

        protected CustomException(string message, Exception innerException)
            : base(message, innerException)
        {
        }
    }
}
