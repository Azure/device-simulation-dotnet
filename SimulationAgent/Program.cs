// Copyright (c) Microsoft. All rights reserved.

using System.Reflection;
using Autofac;
using Microsoft.Azure.IoTSolutions.DeviceSimulation.Services;
using Microsoft.Azure.IoTSolutions.DeviceSimulation.Services.Runtime;
using Microsoft.Azure.IoTSolutions.DeviceSimulation.SimulationAgent.Agent;

namespace Microsoft.Azure.IoTSolutions.DeviceSimulation.SimulationAgent
{
    /// <summary>Application entry point</summary>
    public class Program
    {
        static void Main(string[] args)
        {
            var container = GetDependencyInjectionContainer();
            container.Resolve<ISimulation>().Run();
        }

        private static IContainer GetDependencyInjectionContainer()
        {
            var builder = new ContainerBuilder();

            // Autowire interfaces to classes. Note that the solution assemblies
            // are explicitly managed here. This could be extended to analyze
            // all the assemblies directly and indirectly referenced.

            var assembly = Assembly.GetExecutingAssembly();
            builder.RegisterAssemblyTypes(assembly).AsImplementedInterfaces();

            assembly = typeof(ServicesConfig).Assembly;
            builder.RegisterAssemblyTypes(assembly).AsImplementedInterfaces();

            // Custom rules overriding autowired ones.
            SetupCustomDependencyInjection(builder);

            return builder.Build();
        }

        private static void SetupCustomDependencyInjection(ContainerBuilder builder)
        {
            // Make sure the configuration is read only once
            var config = new Config();
            builder.RegisterInstance(config).As<IConfig>().SingleInstance();

            // Service configuration is generated by the entry point, so we
            // prepare the instance here.
            builder.RegisterInstance(config.ServicesConfig).As<IServicesConfig>().SingleInstance();

            // Reusable instances (singletons)
            builder.RegisterType<Simulations>().As<ISimulations>().SingleInstance();
            builder.RegisterType<DeviceTypes>().As<IDeviceTypes>().SingleInstance();
        }
    }
}
